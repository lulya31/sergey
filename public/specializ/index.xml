<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Specializzes on АТТЕСТАЦИЯ</title>
    <link>http://localhost:1313/specializ/</link>
    <description>Recent content in Specializzes on АТТЕСТАЦИЯ</description>
    <generator>Hugo</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 22 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/specializ/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Базы данных</title>
      <link>http://localhost:1313/specializ/bd/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/bd/</guid>
      <description>Реляционные базы данных Суть реляционных баз в хранении данных в связанных таблицах.&#xA;Реляционные базы данных. Эта модель используется, когда важны согласованность и высокая нормализация данных.&#xA;Нормализация БД — это процесс организации данных определенным образом и рекомендации по проектированию.&#xA;Поддержание целостности данных: данные должны быть актуальными, последовательными и отражать реальную ситуацию.&#xA;Устранение дублирования данных: избыточность данных не только увеличивает размеры хранилища, но и усложняет процессы обновления, добавления и удаления записей.&#xA;Упрощение структуры данных: сложные связи и структуры затрудняют разработку, обслуживание и масштабирование системы.</description>
    </item>
    <item>
      <title>DDD</title>
      <link>http://localhost:1313/specializ/ddd/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/ddd/</guid>
      <description>Предметно-ориентированное проектирование Основные определения DDD (domain driven desigh) – это подход, который позволяет значительно ускорить процесс разработки программного обеспечения в незнакомой области, а также с легкостью развивать и сопровождать его в будущем.&#xA;В чем преимущество DDD?&#xA;код проекта, который понятен всем участникам проектной команды; явная постановка задач; легко находятся ошибки в бизнес логике, при тестировании легко просматривается код и легко находятся логические ошибки; в будущем можно безопасно расширять и интегрировать проект.</description>
    </item>
    <item>
      <title>HTTP</title>
      <link>http://localhost:1313/specializ/introduction-aux-modeles-hugo/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/introduction-aux-modeles-hugo/</guid>
      <description>HTTP (HyperText Transfer Protocol) — «протокол передачи гипертекста» представляет собой протокол прикладного уровня, используемый для доступа к ресурсам Всемирной Паутины. Под термином гипертекст следует понимать текст, в понятном для человека представлении, при этом содержащий ссылки на другие ресурсы.&#xA;В обмене информацией по HTTP-протоколу принимают участие клиент и сервер. Происходит это по следующей схеме:&#xA;Клиент запрашивает у сервера некоторый ресурс. Сервер обрабатывает запрос и возвращает клиенту ресурс, который был запрошен. Данные между клиентом и сервером в рамках работы протокола передаются с помощью HTTP-сообщений.</description>
    </item>
    <item>
      <title>Rest &amp; Soap &amp; grpc</title>
      <link>http://localhost:1313/specializ/resr_soap/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/resr_soap/</guid>
      <description>API (Application programming interface) — это контракт, который предоставляет программа. «Ко мне можно обращаться так и так, я обязуюсь делать то и это».&#xA;REST REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции поддерживать.&#xA;Клиент-серверная модель (client-server model). Отсутствие состояния (statelessness). Кэширование (cacheability). Единообразие интерфейса (uniform interface). Многоуровневая система (layered system). Конечная точка – это адрес ресурса, который является пунктом доступа к системе извне.</description>
    </item>
    <item>
      <title>Архитектура</title>
      <link>http://localhost:1313/specializ/architecture/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/architecture/</guid>
      <description>Архитектура Layered (слоистая) архитектура — это структура проектирования программного обеспечения, в которой система разбивается на несколько слоев или уровней. Каждый слой выполняет определенную функциональность и обладает строго определенными отношениями с другими слоями. В этой архитектуре каждый слой является независимым и может быть изменен без влияния на другие слои.&#xA;Принцип слоистой архитектуры состоит в том, чтобы разделить систему на отдельные уровни, где каждый уровень предоставляет определенные сервисы или функции. Обычно слоистая архитектура состоит из трех основных слоев: представления (presentation layer), бизнес-логики (business logic layer) и слоя доступа к данным (data access layer).</description>
    </item>
    <item>
      <title>Брокеры сообщений</title>
      <link>http://localhost:1313/specializ/debuter-avec-hugo/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/debuter-avec-hugo/</guid>
      <description>Брокеры сообщений Брокер сообщений или очередь сообщений - это программа (ПО), которая служит посредником между сервисами одной или нескольких систем. Использование подобных систем стало особенно актуально с развитием микросервисной архитектуры.&#xA;Брокер сообщений можно представить как &amp;ldquo;чёрный ящик&amp;rdquo;, в который кто-то кладёт данные, а кто-то другой забирает эти данные.&#xA;Зачем нужны брокеры сообщений?&#xA;Асинхронное взаимодействие Очереди сообщений позволяют сервисам обмениваться данными асинхронно в отличии от взаимодействия по HTTP. То есть отправитель не ждёт мгновенного ответа от получателя (и не останавливает свою работу во время ожидания), а может дальше продолжать свою работу.</description>
    </item>
    <item>
      <title>Диаграмма</title>
      <link>http://localhost:1313/specializ/creation-dun-nouveau-theme/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/creation-dun-nouveau-theme/</guid>
      <description>Диаграмма блок-схем Блок-схема — это графическое представление алгоритмов или процессов, в котором отдельные шаги отображаются в виде блоков, соединённых стрелками, указывающими направление последовательности действий. Этот тип диаграммы широко используется для визуализации рабочих процессов, систем и алгоритмов, что помогает лучше понять и объяснить сложные процессы.&#xA;Sequence диаграмма Диаграмма последовательности (или sequence-диаграмма) — это тип диаграммы в языке моделирования UML, который иллюстрирует взаимодействие между объектами в определённой последовательности. Она показывает, как объекты обмениваются сообщениями во времени, что делает её полезной для анализа динамики системы и описания бизнес-процессов.</description>
    </item>
    <item>
      <title>Контейнеризация и Виртуализация</title>
      <link>http://localhost:1313/specializ/migrer-vers-hugo-depuis-jekyll/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/specializ/migrer-vers-hugo-depuis-jekyll/</guid>
      <description>Виртуализация Виртуализация — это создание изолированной программной среды (или нескольких таких сред) в рамках одного физического устройства. Представим себе обычный персональный компьютер. У него есть:&#xA;аппаратная часть — долговременная память, оперативная память, процессор, устройства ввода-вывода и т.д.; программная часть — БИОС и операционная система. Среднестатистический пользователь использует на одном компьютере одну операционную систему — этого достаточно для большинства повседневных задач. При этом ОС и установленные в ней прикладные и системные программы задействуют все вычислительные ресурсы компьютера.</description>
    </item>
  </channel>
</rss>
