<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>АТТЕСТАЦИЯ</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on АТТЕСТАЦИЯ</description>
    <generator>Hugo</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 22 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Базы данных</title>
      <link>http://localhost:1313/advanced/bd/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/bd/</guid>
      <description>Go Back&#xA;1. Реляционные базы данных 2. Нереляционные базы данных 2.1 Базы данных по принципу «ключ — значение 2.2 Документоориентированные базы данных 2.3 Графовые базы данных 2.4 Колоночные базы данных 3. Миграция Реляционные базы данных Суть реляционных баз в хранении данных в связанных таблицах.&#xA;Эта модель используется, когда важны согласованность и высокая нормализация данных.&#xA;Нормализация БД — это процесс организации данных определенным образом и рекомендации по проектированию.&#xA;Поддержание целостности данных: данные должны быть актуальными, последовательными и отражать реальную ситуацию.</description>
    </item>
    <item>
      <title>DDD</title>
      <link>http://localhost:1313/advanced/ddd/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/ddd/</guid>
      <description>Go Back&#xA;1. Архитектура 2. Монолиты 3. Микросервисы Предметно-ориентированное проектирование Основные определения DDD (domain driven desigh) – это подход, который позволяет значительно ускорить процесс разработки программного обеспечения в незнакомой области, а также с легкостью развивать и сопровождать его в будущем.&#xA;В чем преимущество DDD?&#xA;код проекта, который понятен всем участникам проектной команды; явная постановка задач; легко находятся ошибки в бизнес логике, при тестировании легко просматривается код и легко находятся логические ошибки; в будущем можно безопасно расширять и интегрировать проект.</description>
    </item>
    <item>
      <title>Docker</title>
      <link>http://localhost:1313/base/docker/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/base/docker/</guid>
      <description>Go Back&#xA;1. Docker 2. Dockerfile 3. Docker compose 4. K8s 5 Lens Docker это платформа для контейнеризации приложений, которая позволяет упаковать приложение и его зависимости в единый контейнер. Этот контейнер можно запустить на любой системе, поддерживающей Docker, и он будет работать идентично независимо от окружения.&#xA;Образ (Image): Образ - это статический файл, содержащий все необходимое для запуска приложения, включая код, библиотеки и зависимости.&#xA;Контейнер (Container): Контейнер - это экземпляр образа, который можно запустить и остановить.</description>
    </item>
    <item>
      <title>Git</title>
      <link>http://localhost:1313/base/git/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/base/git/</guid>
      <description>Go Back&#xA;1. Git 2. Gitflow Git — это система контроля версий, которая помогает отслеживать историю изменений в файлах.&#xA;1. gitignore:&#xA;Git рассматривает каждый файл в вашей рабочей копии как файл одного из трех нижеуказанных типов.&#xA;Отслеживаемый файл — файл, который был предварительно проиндексирован или зафиксирован в коммите.&#xA;Неотслеживаемый файл — файл, который не был проиндексирован или зафиксирован в коммите.&#xA;Игнорируемый файл — файл, явным образом помеченный для Git как файл, который необходимо игнорировать.</description>
    </item>
    <item>
      <title>HTTP</title>
      <link>http://localhost:1313/advanced/introduction-aux-modeles-hugo/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/introduction-aux-modeles-hugo/</guid>
      <description>Go Back&#xA;1. HTTP 2. Стартовая строка 3. Заголовки HTTP (HyperText Transfer Protocol) — «протокол передачи гипертекста» представляет собой протокол прикладного уровня, используемый для доступа к ресурсам Всемирной Паутины. Под термином гипертекст следует понимать текст, в понятном для человека представлении, при этом содержащий ссылки на другие ресурсы.&#xA;В обмене информацией по HTTP-протоколу принимают участие клиент и сервер. Происходит это по следующей схеме:&#xA;Клиент запрашивает у сервера некоторый ресурс. Сервер обрабатывает запрос и возвращает клиенту ресурс, который был запрошен.</description>
    </item>
    <item>
      <title>Rest &amp; Soap &amp; grpc</title>
      <link>http://localhost:1313/advanced/rest_soap/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/rest_soap/</guid>
      <description>Go Back&#xA;1. Rest 2. SOAP 3. gRPC API (Application programming interface) — это контракт, который предоставляет программа. «Ко мне можно обращаться так и так, я обязуюсь делать то и это».&#xA;REST REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции поддерживать.&#xA;Клиент-серверная модель (client-server model). Отсутствие состояния (statelessness). Кэширование (cacheability). Единообразие интерфейса (uniform interface). Многоуровневая система (layered system). Конечная точка – это адрес ресурса, который является пунктом доступа к системе извне.</description>
    </item>
    <item>
      <title>Архитектура,Монолиты,Микросервисы</title>
      <link>http://localhost:1313/advanced/migrer-vers-hugo-depuis-jekyll/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/migrer-vers-hugo-depuis-jekyll/</guid>
      <description>Go Back&#xA;1. Архитектура 2. Монолиты 3. Микросервисы Архитектура Layered (слоистая) архитектура — это структура проектирования программного обеспечения, в которой система разбивается на несколько слоев или уровней. Каждый слой выполняет определенную функциональность и обладает строго определенными отношениями с другими слоями. В этой архитектуре каждый слой является независимым и может быть изменен без влияния на другие слои.&#xA;Принцип слоистой архитектуры состоит в том, чтобы разделить систему на отдельные уровни, где каждый уровень предоставляет определенные сервисы или функции.</description>
    </item>
    <item>
      <title>Брокеры сообщений</title>
      <link>http://localhost:1313/advanced/debuter-avec-hugo/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/debuter-avec-hugo/</guid>
      <description>Go Back&#xA;1. Брокеры сообщений 2. Kafka 3. MQ Брокеры сообщений Брокер сообщений или очередь сообщений - это программа (ПО), которая служит посредником между сервисами одной или нескольких систем. Использование подобных систем стало особенно актуально с развитием микросервисной архитектуры.&#xA;Брокер сообщений можно представить как &amp;ldquo;чёрный ящик&amp;rdquo;, в который кто-то кладёт данные, а кто-то другой забирает эти данные.&#xA;Зачем нужны брокеры сообщений?&#xA;Асинхронное взаимодействие Очереди сообщений позволяют сервисам обмениваться данными асинхронно в отличии от взаимодействия по HTTP.</description>
    </item>
    <item>
      <title>Диаграмма</title>
      <link>http://localhost:1313/advanced/creation-dun-nouveau-theme/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/creation-dun-nouveau-theme/</guid>
      <description>Go Back&#xA;1. Диаграмма блок-схем 2. Sequence диаграмма 3. BPMN Диаграмма блок-схем Блок-схема — это графическое представление алгоритмов или процессов, в котором отдельные шаги отображаются в виде блоков, соединённых стрелками, указывающими направление последовательности действий. Этот тип диаграммы широко используется для визуализации рабочих процессов, систем и алгоритмов, что помогает лучше понять и объяснить сложные процессы.&#xA;Sequence диаграмма Диаграмма последовательности (или sequence-диаграмма) — это тип диаграммы в языке моделирования UML, который иллюстрирует взаимодействие между объектами в определённой последовательности.</description>
    </item>
    <item>
      <title>Контейнеризация и Виртуализация</title>
      <link>http://localhost:1313/advanced/migrer-vers-hugo-depuis-jekyll/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/migrer-vers-hugo-depuis-jekyll/</guid>
      <description>Go Back&#xA;1. Виртуализация 2. Контейнеризация 3. Отличия Виртуализация Виртуализация — это создание изолированной программной среды (или нескольких таких сред) в рамках одного физического устройства. Представим себе обычный персональный компьютер. У него есть:&#xA;аппаратная часть — долговременная память, оперативная память, процессор, устройства ввода-вывода и т.д.; программная часть — БИОС и операционная система. Среднестатистический пользователь использует на одном компьютере одну операционную систему — этого достаточно для большинства повседневных задач. При этом ОС и установленные в ней прикладные и системные программы задействуют все вычислительные ресурсы компьютера.</description>
    </item>
  </channel>
</rss>
