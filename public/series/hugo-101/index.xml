<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo 101 on АТТЕСТАЦИЯ</title>
    <link>http://localhost:1313/series/hugo-101/</link>
    <description>Recent content in Hugo 101 on АТТЕСТАЦИЯ</description>
    <generator>Hugo</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 22 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/series/hugo-101/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Базы данных</title>
      <link>http://localhost:1313/advanced/bd/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/bd/</guid>
      <description>Go Back&#xA;1. Реляционные базы данных 2. Нереляционные базы данных 2.1 Базы данных по принципу «ключ — значение 2.2 Документоориентированные базы данных 2.3 Графовые базы данных 2.4 Колоночные базы данных Реляционные базы данных Суть реляционных баз в хранении данных в связанных таблицах.&#xA;Реляционные базы данных. Эта модель используется, когда важны согласованность и высокая нормализация данных.&#xA;Нормализация БД — это процесс организации данных определенным образом и рекомендации по проектированию.&#xA;Поддержание целостности данных: данные должны быть актуальными, последовательными и отражать реальную ситуацию.</description>
    </item>
    <item>
      <title>DDD</title>
      <link>http://localhost:1313/advanced/ddd/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/ddd/</guid>
      <description>Go Back&#xA;1. Архитектура 2. Монолиты 3. Микросервисы Предметно-ориентированное проектирование Основные определения DDD (domain driven desigh) – это подход, который позволяет значительно ускорить процесс разработки программного обеспечения в незнакомой области, а также с легкостью развивать и сопровождать его в будущем.&#xA;В чем преимущество DDD?&#xA;код проекта, который понятен всем участникам проектной команды; явная постановка задач; легко находятся ошибки в бизнес логике, при тестировании легко просматривается код и легко находятся логические ошибки; в будущем можно безопасно расширять и интегрировать проект.</description>
    </item>
    <item>
      <title>Rest &amp; Soap &amp; grpc</title>
      <link>http://localhost:1313/advanced/rest_soap/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/rest_soap/</guid>
      <description>Go Back&#xA;1. Rest 2. SOAP 3. gRPC API (Application programming interface) — это контракт, который предоставляет программа. «Ко мне можно обращаться так и так, я обязуюсь делать то и это».&#xA;REST REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции поддерживать.&#xA;Клиент-серверная модель (client-server model). Отсутствие состояния (statelessness). Кэширование (cacheability). Единообразие интерфейса (uniform interface). Многоуровневая система (layered system). Конечная точка – это адрес ресурса, который является пунктом доступа к системе извне.</description>
    </item>
  </channel>
</rss>
